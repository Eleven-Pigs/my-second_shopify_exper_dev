# frozen_string_literal: true
# typed: false

module Tapioca
  module Compilers
    class SymbolTableCompiler
      extend(T::Sig)

      sig do
        params(
          gem: Gemfile::Gem,
          indent: Integer,
          generate_header: T.any(TrueClass, FalseClass),
          command: String,
          typed_sigil: String
        ).returns(String)
      end
      def compile(
        gem,
        indent = 0,
        generate_header: true,
        command: default_command,
        typed_sigil: default_typed_sigil
      )
        output = Tapioca::Compilers::SymbolTable::SymbolGenerator.new(gem, indent).generate
        output.prepend(header(command, typed_sigil)) if generate_header
        output
      end

      sig { params(command: String, typed_sigil: String).returns(String) }
      def header(command, typed_sigil)
        <<~HEAD
          # This file is autogenerated. Do not edit it by hand. Regenerate it with:
          #   #{command}

          # typed: #{typed_sigil}

        HEAD
      end

      sig { returns(String) }
      def default_typed_sigil
        "true"
      end

      sig { returns(String) }
      def default_command
        command = File.basename($PROGRAM_NAME)
        args = ARGV.join(" ")

        "#{command} #{args}"
      end
    end
  end
end
