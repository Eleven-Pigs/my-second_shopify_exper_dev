# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   tapioca generate

# typed: true

class Byebug::PryProcessor < ::Byebug::CommandProcessor
  def at_breakpoint(breakpoint); end
  def at_end; end
  def at_line; end
  def at_return(_return_value); end
  def bold(*args, &block); end
  def output(*args, &block); end
  def perform(action, options = _); end
  def pry; end
  def pry=(_); end
  def run(&_block); end

  private

  def n_hits(breakpoint); end
  def perform_backtrace(_options); end
  def perform_down(options); end
  def perform_finish(*_); end
  def perform_frame(options); end
  def perform_next(options); end
  def perform_step(options); end
  def perform_up(options); end
  def resume_pry; end

  def self.start; end
end

module Pry::Byebug
end

module Pry::Byebug::Breakpoints
  extend(::Pry::Byebug::Breakpoints)
  extend(::Enumerable)

  def add_file(file, line, expression = _); end
  def add_method(method, expression = _); end
  def breakpoints; end
  def change(id, expression = _); end
  def delete(id); end
  def delete_all; end
  def disable(id); end
  def disable_all; end
  def each(&block); end
  def enable(id); end
  def find_by_id(id); end
  def last; end
  def size; end
  def to_a; end

  private

  def change_status(id, enabled = _); end
  def validate_expression(exp); end
end

class Pry::Byebug::Breakpoints::FileBreakpoint < ::SimpleDelegator
  def source_code; end
  def to_s; end
end

class Pry::Byebug::Breakpoints::MethodBreakpoint < ::SimpleDelegator
  def initialize(byebug_bp, method); end

  def source_code; end
  def to_s; end
end

module PryByebug
  def current_remote_server; end
  def current_remote_server=(_); end

  private

  def check_file_context(target, msg = _); end
  def file_context?(target); end

  def self.check_file_context(target, msg = _); end
  def self.file_context?(target); end
end

class PryByebug::BacktraceCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::BreakCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Multiline)
  include(::PryByebug::Helpers::Breakpoints)

  def options(opt); end
  def process; end

  private

  def add_breakpoint(place, condition); end
  def new_breakpoint; end
  def option_to_method(option); end
  def print_all; end
  def process_condition; end
  def process_delete; end
  def process_delete_all; end
  def process_disable; end
  def process_disable_all; end
  def process_enable; end
  def process_show; end
end

class PryByebug::ContinueCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Breakpoints)
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::DownCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::ExitAllCommand < ::Pry::Command::ExitAll
  def process; end
end

class PryByebug::FinishCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::FrameCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

module PryByebug::Helpers
end

module PryByebug::Helpers::Breakpoints
  def bold_puts(msg); end
  def breakpoints; end
  def current_file; end
  def max_width; end
  def print_breakpoints_header; end
  def print_full_breakpoint(breakpoint); end
  def print_short_breakpoint(breakpoint); end
end

module PryByebug::Helpers::Multiline
  def check_multiline_context; end
end

module PryByebug::Helpers::Navigation
  def breakout_navigation(action, options = _); end
end

class PryByebug::NextCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Multiline)
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::StepCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end

class PryByebug::UpCommand < ::Pry::ClassCommand
  include(::PryByebug::Helpers::Navigation)

  def process; end
end
